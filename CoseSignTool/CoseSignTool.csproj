<Project Sdk="Microsoft.NET.Sdk">
	<!--Build configuration-->
	<PropertyGroup>
		<OutputType>Exe</OutputType>
		<TargetFramework>net8.0</TargetFramework>
		<RuntimeIdentifiers>win-x64;linux-x64;osx-x64;osx-arm64;</RuntimeIdentifiers>
		<Platforms>AnyCPU</Platforms>
	</PropertyGroup>

	<!--Code style and static analysis-->
	<PropertyGroup>
		<EnablePreviewFeatures>true</EnablePreviewFeatures>
		<Nullable>enable</Nullable>
		<EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
		<EnableNETAnalyzers>true</EnableNETAnalyzers>
		<AnalysisLevel>latest</AnalysisLevel>
		<TreatWarningsAsErrors>true</TreatWarningsAsErrors>
	</PropertyGroup>

	<!--Strong name signing-->
	<PropertyGroup>
		<SignAssembly>True</SignAssembly>
		<PublicSign>True</PublicSign>
		<AssemblyOriginatorKeyFile>..\StrongNameKeys\35MSSharedLib1024.snk</AssemblyOriginatorKeyFile>
	</PropertyGroup>

	<!--NuGet package configuration-->
	<PropertyGroup>
		<PackageId>$(MsBuildProjectName)</PackageId>
		<PackageVersion>$(VersionNgt)</PackageVersion>
		<Company>Microsoft</Company>
		<PackageLicenseFile>LICENSE</PackageLicenseFile>
		<PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
		<PackageReadmeFile>readme.md</PackageReadmeFile>
		<PackageReleaseNotes>ChangeLog.md</PackageReleaseNotes>
		<Description>Command line tool to sign files using COSE Sign1 message envelopes in a way that is compatible with Supply Chain Integrity Transparency and Trust (SCITT).</Description>
		<PackAsTool>true</PackAsTool>
		<ToolCommandName>CoseSignTool</ToolCommandName>
		<IncludeBuildOutput>true</IncludeBuildOutput>
	</PropertyGroup>

	<!--Internals for testing-->
	<ItemGroup>
		<AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
			<_Parameter1>CoseSignTool.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9</_Parameter1>
		</AssemblyAttribute>
	</ItemGroup>

	<!--Package references-->
	<ItemGroup>
		<PackageReference Include="Microsoft.Extensions.Configuration.CommandLine" Version="9.0.7" />
	</ItemGroup>

	<!--Project references-->
	<ItemGroup>
		<ProjectReference Include="..\CoseHandler\CoseHandler.csproj" />
		<ProjectReference Include="..\CoseSign1.Certificates\CoseSign1.Certificates.csproj" />
    	<ProjectReference Include="..\CoseSign1.Headers\CoseSign1.Headers.csproj" />
		<ProjectReference Include="..\CoseSign1.Transparent.CTS\CoseSign1.Transparent.CTS.csproj" />
		<ProjectReference Include="..\CoseSignTool.Abstractions\CoseSignTool.Abstractions.csproj" />
	</ItemGroup>

	<!--Files to include in the package-->
	<ItemGroup>
		<None Include="..\LICENSE" Pack="true" PackagePath="\" />
		<None Include="..\readme.md" Pack="true" PackagePath="\" />
		<None Include="..\ChangeLog.md" Pack="true" PackagePath="\" />
		<None Include="..\docs\*.md" Pack="true" PackagePath="\docs\" />
		<None Include="\bin\Release\net8.0\_manifest\spdx_2.2\*.*" Condition="Exists('\bin\Release\net8.0\_manifest\spdx_2.2\*.*')" Pack="true" PackagePath="Build\sbom\spdx_2.2" />
	</ItemGroup>

	<!--Reusable plugin deployment template-->
	<Target Name="DeployPlugin">
		<PropertyGroup>
			<PluginsDir>$(OutputPath)plugins</PluginsDir>
			<PluginSubDir>$(PluginsDir)\$(PluginName)</PluginSubDir>
			<PluginSourceDir>$(MSBuildProjectDirectory)\..\$(PluginName)\bin\$(Configuration)\net8.0</PluginSourceDir>
		</PropertyGroup>
		
		<MakeDir Directories="$(PluginSubDir)" />
		
		<!-- Get list of files that exist in main application output (these are "shared" dependencies) -->
		<ItemGroup>
			<MainAppFiles Include="$(OutputPath)*.dll;$(OutputPath)*.exe" />
		</ItemGroup>
		
		<!-- Get all plugin files -->
		<ItemGroup>
			<AllPluginFiles Include="$(PluginSourceDir)\*.dll;$(PluginSourceDir)\*.exe;$(PluginSourceDir)\*.xml;$(PluginSourceDir)\*.pdb;$(PluginSourceDir)\*.json" />
		</ItemGroup>
		
		<!-- Filter out shared dependencies - only copy files that don't exist in main app or are plugin-specific -->
		<ItemGroup>
			<PluginSpecificFiles Include="@(AllPluginFiles)" 
				Condition="!Exists('$(OutputPath)%(Filename)%(Extension)') OR $([System.String]::new('%(Filename)').StartsWith('$(PluginName)'))" />
		</ItemGroup>
		
		<Copy SourceFiles="@(PluginSpecificFiles)" DestinationFolder="$(PluginSubDir)" Condition="Exists('$(PluginSourceDir)')" SkipUnchangedFiles="true" />
		
		<Message Text="Plugin '$(PluginName)' deployed to: $(PluginSubDir)" Importance="high" Condition="Exists('$(PluginSourceDir)')" />
		<Message Text="Copied @(PluginSpecificFiles->Count()) plugin-specific files" Importance="high" Condition="'@(PluginSpecificFiles)' != ''" />
		<Warning Text="Plugin directory not found at: $(PluginSourceDir)" Condition="!Exists('$(PluginSourceDir)')" />
	</Target>

	<!--Automatic plugin discovery and deployment-->
	<Target Name="DeployAllPlugins" AfterTargets="Build" Condition="'$(DeployPlugins)' == 'true'">
		<!-- Discover all plugin projects by looking for *.Plugin.csproj files -->
		<ItemGroup>
			<PluginProjects Include="$(MSBuildProjectDirectory)\..\**\*.Plugin.csproj" />
		</ItemGroup>
		
		<!-- Extract plugin names from project paths -->
		<ItemGroup>
			<PluginNames Include="@(PluginProjects->'%(Filename)')" />
		</ItemGroup>
		
		<!-- Deploy each discovered plugin -->
		<MSBuild Projects="$(MSBuildProjectFile)" 
				 Properties="PluginName=%(PluginNames.Identity);Configuration=$(Configuration)" 
				 Targets="DeployPlugin" 
				 Condition="'@(PluginNames)' != ''" />
		
		<Message Text="Auto-discovered and deployed @(PluginNames->Count()) plugin(s): @(PluginNames, ', ')" Importance="high" Condition="'@(PluginNames)' != ''" />
		<Warning Text="No plugin projects found (looking for *.Plugin.csproj)" Condition="'@(PluginNames)' == ''" />
	</Target>

	<!--Deploy plugins for publish operations-->
	<Target Name="DeployAllPluginsForPublish" AfterTargets="Publish" Condition="'$(DeployPlugins)' == 'true'">
		<!-- Discover all plugin projects by looking for *.Plugin.csproj files -->
		<ItemGroup>
			<PluginProjectsForPublish Include="$(MSBuildProjectDirectory)\..\**\*.Plugin.csproj" />
		</ItemGroup>
		
		<!-- Extract plugin names from project paths -->
		<ItemGroup>
			<PluginNamesForPublish Include="@(PluginProjectsForPublish->'%(Filename)')" />
		</ItemGroup>
		
		<!-- Deploy each discovered plugin to the publish directory -->
		<MSBuild Projects="$(MSBuildProjectFile)" 
				 Properties="PluginName=%(PluginNamesForPublish.Identity);Configuration=$(Configuration);OutputPath=$(PublishDir)" 
				 Targets="DeployPlugin" 
				 Condition="'@(PluginNamesForPublish)' != ''" />
		
		<Message Text="Auto-discovered and deployed @(PluginNamesForPublish->Count()) plugin(s) for publish: @(PluginNamesForPublish, ', ')" Importance="high" Condition="'@(PluginNamesForPublish)' != ''" />
	</Target>

	<!--Target to build and deploy all plugins for local development-->
	<Target Name="BuildAndDeployPlugins">
		<!-- Discover and build all plugin projects -->
		<ItemGroup>
			<PluginProjects Include="$(MSBuildProjectDirectory)\..\**\*.Plugin.csproj" />
		</ItemGroup>
		
		<!-- Build each plugin project -->
		<MSBuild Projects="@(PluginProjects)" Properties="Configuration=$(Configuration)" Condition="'@(PluginProjects)' != ''" />
		
		<!-- Deploy all plugins -->
		<MSBuild Projects="$(MSBuildProjectFile)" Properties="DeployPlugins=true;Configuration=$(Configuration)" Targets="DeployAllPlugins" />
		
		<Message Text="Built and deployed @(PluginProjects->Count()) plugin project(s)" Importance="high" Condition="'@(PluginProjects)' != ''" />
	</Target>
</Project>
